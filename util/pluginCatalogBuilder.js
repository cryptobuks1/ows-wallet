'use strict';

/**
 * Builds the plugin catalog from an app-template 'app.config.json' plugins entry.
 * Installs the plugins into the app www/ directory.
 */

var fs = require('fs-extra');
var path = require('path');
var utils = require(path.resolve(__dirname, './utils'));
var appConfig;

// Relative to the project root directory.
var APP_PATH = './app/';
var WWW_PATH = './www/';
var PLUGIN_ROOT = 'plugins/';
var KNOWN_PLUGIN_KINDS = ['applet', 'service', 'applet-builtin'];

// Build app/app.plugins.js.
// Publish plugin skins to the app theme directory.
// 
var buildPluginCatalog = function(config) {
  var catalog = {
    plugins: {}
  };

  appConfig = config;

  var content = '';
  content += '\'use strict\';\n\n';
  content += '// Do not edit, this file is auto-generated by grunt.\n\n';
  content += 'angular.module(\'owsWalletApp\').constant(\'pluginCatalog\', \n';

  // Get a list of files for all kinds of plugins combined.
  var pluginList = Object.keys(appConfig.plugins);
  var pluginIds = [];

  console.log('Plugins included in this build:');

  for (var i = 0; i < pluginList.length; i++) {

    // Locate the plugin.
    var pluginPath = pluginList[i]; // Path to plugin from app-template config location
    var pluginReleaseDir; // Directory containing the plugin installable release
    var pluginWwwDir; // Runtime plugin directory relative to www/
    var pluginInstallDir; // Plugin installation directory relative to project root

    if (pluginPath.includes('builtin')) {
      // Builtin plugins
      pluginReleaseDir = APP_PATH + pluginPath + '/';
      pluginWwwDir = PLUGIN_ROOT + pluginPath + '/';
      pluginInstallDir = WWW_PATH + pluginWwwDir;
    } else {
      // NPM plugins
      pluginReleaseDir = 'node_modules/' + pluginPath + '/release/';
      pluginWwwDir = PLUGIN_ROOT + pluginPath + '/';
      pluginInstallDir = WWW_PATH + pluginWwwDir;
    }

    // Read plugin configuration.
    var pluginConfig = utils.readJSON(pluginReleaseDir + 'plugin.json');
    pluginConfig.uri = pluginWwwDir;

    // Replace tags.
    var pluginJSON = JSON.stringify(pluginConfig);
    pluginJSON = pluginJSON.replace(/<plugin-path>/g, pluginConfig.uri.slice(0, -1));
    pluginConfig = JSON.parse(pluginJSON);

    for (var n = 0; n < pluginConfig.resources.length; n++) {
      var re = new RegExp('<resource-' + n + '>', 'g');
      pluginJSON = pluginJSON.replace(re, pluginConfig.resources[n]);
    }

    pluginConfig = JSON.parse(pluginJSON);

    // Detect and fail if duplicate plugin id exists.
    if (pluginIds.indexOf(pluginConfig.header.id) >= 0) {
      throw new Error('> ERROR - Duplicate plugin id detected: \'' + pluginConfig.header.id + '\'');
    }

    var allowInstall = KNOWN_PLUGIN_KINDS.includes(pluginConfig.header.kind);

    if (!allowInstall) {
      throw new Error('> ERROR - unknown plugin kind [' + pluginConfig.header.kind + ']');
    }

    // Install the plugin; fail script if unable to install.
    try {
      fs.ensureDirSync(pluginInstallDir);
      fs.copySync(pluginReleaseDir + 'www', pluginInstallDir);

      // Don't push skin configuration files to app.
      utils.removeFilesByTypeRecursive(pluginInstallDir + 'skins', 'json');

    } catch (ex) {
       throw new Error('Failed to install plugin \'' + pluginPath + '\': ' + ex);
    }

    // All plugins inserted into the app catalog storage during the build process are marked as such.
    // Plugins inserted from a download should include a URL as the value.
    pluginConfig.source = 'build';

    switch (pluginConfig.header.kind) {
      case 'applet-builtin':
        // Apply properties from app package.json to builtin plugins.
        var pkg = utils.readJSON('package.json');
        pluginConfig.header.version = pkg.version;
        pluginConfig.header.author = pkg.author;
        // break; // Fall through to handle normal applet processing.

      case 'applet':
        // Complete the main view.
        if (pluginConfig.mainView && pluginConfig.mainView.indexOf('/') >= 0) {
          throw new Error('Applet in \'' + filelist[i] + '\' should not include a path in \'mainView\'. Use only the view name; e.g., \'index.html\'.');
        }

        var skinsMessage = 'No skins';
        if (pluginConfig.skins && Object.keys(pluginConfig.skins).length > 0) {
          skinsMessage = 'Skins for this plugin:';

          var s = Object.keys(pluginConfig.skins);

          for (var j=0; j < s.length; j++) {
            // Set the default skin id.
            if (pluginConfig.skins[s[j]].default) {
              pluginConfig.defaultSkinId = s[j];
            }
            skinsMessage += '\n      \'' + s[j] + '\'';
          }
          // If no default skin specified then choose the first one in the list.
          if (!pluginConfig.defaultSkinId) {
            pluginConfig.defaultSkinId = s[0];
          }
        }
        break;

      case 'service':
        // Nothing to do.
        break;
    }

    // Add the plugin to the catalog.
    catalog.plugins[pluginConfig.header.id] = pluginConfig;

    // Remember that we installed this plugin.
    pluginIds.push(pluginConfig.header.id);

    var installSummary = '>   [' + pluginConfig.header.kind + '] \'' + pluginPath + '\'@' + pluginConfig.header.version + ' (' + pluginConfig.header.id + ')' + '\n';
    (skinsMessage ? installSummary += '    ' + skinsMessage + '\n' : null);
    if (pluginConfig.dependencies && Object.keys(pluginConfig.dependencies).length > 0) {
      installSummary += '    dependencies=' + Object.keys(pluginConfig.dependencies) + '\n';
    } else {
      installSummary += '    No dependencies' + '\n';
    }

    console.log(installSummary);
  }

  content += utils.cleanJSONQuotesOnKeys(JSON.stringify(catalog, null, 2));
  content += ');\n';
  fs.writeFileSync(APP_PATH + 'app.plugincatalog.js', content);
};

module.exports = {
  build: buildPluginCatalog
};
