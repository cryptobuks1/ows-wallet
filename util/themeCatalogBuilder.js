'use strict';

/**
 * Builds the theme catalog from an app-template themes/ directory.
 */

var fs = require('fs-extra');
var path = require('path');
var shell = require('shelljs');
var utils = require(path.resolve(__dirname, './utils'));

var APP_PATH = './app/';

var getCatalog = function(catalogConfig) {
  var catalog = {
    themes: {},
    skins: {}
  };

  var themesRoot = 'theme-catalog/themes/';
  var themesPath = APP_PATH + themesRoot;
  var themeDirs = utils.getAllFoldersFromFolder(themesPath);

  console.log('Themes included in this build:');

  // Construct the URI for each configured theme.
  var themesList = Object.keys(catalogConfig.themes);
  for (var t=0; t < themesList.length; t++) {
    var id = themesList[t];

    // Theme options.
    if (catalogConfig.themes[id].default) {
      catalog.defaultThemeId = id;
    }

    // Find and write the theme to the theme catalog.
    for (var d=0; d < themeDirs.length; d++) {
      var theme = utils.readJSON(themesPath + themeDirs[d] + '/theme.json');
      if (theme.header.id == id) {
        // Match, set the URI for the theme.
        console.log('>> \'' + theme.header.name + '\'@' + theme.header.version + ' (' + id + ')');

        catalog.themes[id] = theme;
        catalog.themes[id].uri = encodeURI(themesRoot + themeDirs[d] + '/');

        // All themes inserted into the app catalog storage during the build process are marked as such.
        // Themes inserted from a download should include a URL as the value.
        catalog.themes[id].source = 'build';

        // Get the skins for the theme and attach to the catalog.
        if (theme.skins) {
          var skins = getSkins(theme.skins);
          Object.keys(skins).forEach(function(k) {
            catalog.skins[k] = skins[k];

            // Identify the default skin for the theme.
            if (theme.skins[k].default) {
              catalog.themes[id].defaultSkinId = k;
            }
          });
        }

        // Replace tags.
        var themeJSON = JSON.stringify(catalog.themes[id]);
        themeJSON = themeJSON.replace(/<theme-path>/g, catalog.themes[id].uri.slice(0, -1));
        catalog.themes[id] = JSON.parse(themeJSON);

        for (var n = 0; n < catalog.themes[id].resources.length; n++) {
          var re = new RegExp('<resource-' + n + '>', 'g');
          themeJSON = themeJSON.replace(re, catalog.themes[id].resources[n]);
        }

        catalog.themes[id] = JSON.parse(themeJSON);
        break;
      }
    }

    if (!catalog.themes[id].uri) {
      console.log('WARNING - theme not found [' + id + '] \', app-template/theme-catalog/themes/ does not define this theme');
    }
  }

  return catalog;
};

var getSkins = function(skinsConfig) {
  var skinsRoot = 'theme-catalog/skins/';
  var skinsPath = APP_PATH + skinsRoot;
  var skinDirs = utils.getAllFoldersFromFolder(skinsPath);
  var skins = {};

  // Construct the URI for each configured skin.
  var skinsList = Object.keys(skinsConfig);
  for (var t=0; t < skinsList.length; t++) {
    var id = skinsList[t];

    // Search all skin definitions for the configured skin.
    for (var d=0; d < skinDirs.length; d++) {
      var skin = utils.readJSON(skinsPath + skinDirs[d] + '/skin.json');
      if (skin.header.id == id) {
        // Match, set the URI for the theme.
        console.log('    [' + skin.header.kind + '] \'' + skin.header.name + '\'@' + skin.header.version + ' (' + id + ')');

        skins[id] = skin;
        skins[id].uri = encodeURI(skinsRoot + skinDirs[d] + '/');

        // All skins inserted into the app catalog storage during the build process are marked as such.
        // Skins inserted from a download should include a URL as the value.
        skins[id].source = 'build';

        // Replace tags.
        var skinJSON = JSON.stringify(skins[id]);
        skinJSON = skinJSON.replace(/<skin-path>/g, skins[id].uri.slice(0, -1));
        skins[id] = JSON.parse(skinJSON);

        for (var n = 0; n < skins[id].resources.length; n++) {
          var re = new RegExp('<resource-' + n + '>', 'g');
          skinJSON = skinJSON.replace(re, skins[id].resources[n]);
        }

        skins[id] = JSON.parse(skinJSON);
        break;
      }
    }

    if (!skins[id].uri) {
      console.log('WARNING - skin not found [' + id + '] \', app-template/theme-catalog/skins/ does not define this skin');
    }
  }
  return skins;
};

var buildThemeCatalog = function(appConfig, debug) {
  var appConfig = utils.readJSON('./app.config.json');
  var themeCatalog = getCatalog(appConfig.themeCatalog);

  var content = '';
  content += '\'use strict\';\n\n';
  content += '// Do not edit, this file is auto-generated by grunt.\n\n';
  content += 'angular.module(\'owsWalletApp\').constant(\'themeCatalog\', \n';
  content += utils.cleanJSONQuotesOnKeys(JSON.stringify(themeCatalog, null, 2));
  content += ');\n';

  fs.writeFileSync(APP_PATH + 'app.themecatalog.js', content);
};

module.exports = {
  build: buildThemeCatalog
};
